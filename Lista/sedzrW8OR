#!/bin/bash
#user=$(echo ${saks:0:5})

# NUNCA  DEJES DE APRENDER
# POWER BY @CHUMOGH

cco=1
[[ -e /bin/ejecutar/limFIX ]] && _limTOP="$(cat < /bin/ejecutar/limFIX)" || _limTOP='1'
chekKEY &> /dev/null 2>&1
users=$(cat /etc/passwd|grep 'home'|grep 'false'|grep -v 'syslog'|awk -F ':' '{print $1}')
_ps="$(ps x)"
unset tmm ext tempo tempoin
uskk=$(cat /bin/ejecutar/uskill)
[[ ! -d /etc/chukk-script/userDIR ]] && mkdir /etc/chukk-script/userDIR
source /etc/chukk-script/cabecalho
mem_free=$(free --mega -h | awk 'NR==2{printf $4}')
cpu_used="$(top -b -n1 | grep 'Cpu(s)' | awk '{print $2 + $4}')"%
if [ "$_userlock" > 0 ]; then
ul="\033[1;33m( \033[1;31m$_userlock \033[1;32mLOCKED \033[1;33m)"
else
ul="\033[1;33m( \033[1;32mALL UNLOCK \033[1;33m)"
fi
[[ -z $(echo -e ${_ps} | grep "ultimatebot" | grep -v "grep") ]] && bt="\033[1;31mOFF\033[0m" || bt="\033[1;32mON\033[0m"
var_sks1=$(echo -e ${_ps} | grep "checkuser" | grep -v grep >/dev/null && echo -e "\033[1;32mON\033[0m" || echo -e "\033[1;31mOFF\033[0m")
echo -e "${cor[2]} 🙎‍ ${cor[5]}CUENTAS SSH / SSL / DROPBEAR By @drowkid01 🙎‍"
msg -bar
echo -e "  \033[1;34m ▸ M LIBRE: \033[1;32m${mem_free}  \033[1;34m ▸ USO DE CPU:\033[1;32m ${cpu_used} "
msg -bar
echo -e "\033[0;35m [\033[0;36m01\033[0;35m]\033[0;31m >${cor[3]} AGREGAR USUARIO\033[0;31m(\033[0;33mHWID\033[0;31m/\033[0;33mNORMAL\033[0;31m/\033[0;33mTOKEN\033[0;31m) 📝" #   ${cor[2]}   [-] >${cor[3]} - "
echo -e "\033[0;35m [\033[0;36m02\033[0;35m]\033[0;31m >${cor[3]} BORRAR 1/TODOS LOS USUARIO/s" 
echo -e "\033[0;35m [\033[0;36m03\033[0;35m]\033[0;31m >${cor[3]} EDITAR USUARIOS REGISTRADOS" 
echo -e "\033[0;35m [\033[0;36m04\033[0;35m]\033[0;31m >${cor[3]} MOSTRAR USUARIOS REGISTRADOS"
echo -e "\033[0;35m [\033[0;36m05\033[0;35m]\033[0;31m >${cor[3]} MOSTRAR USUARIOS CONECTADOS " 
echo -e "\033[0;35m [\033[0;36m06\033[0;35m]\033[0;31m >${cor[3]} EDITAR BANNER ( SSH/Dropbear )" 
echo -e "\033[0;35m [\033[0;36m07\033[0;35m]\033[0;31m >${cor[3]} LOG DE CONSUMO ( Artificial )"
echo -e "\033[0;35m [\033[0;36m08\033[0;35m]\033[0;31m >${cor[3]} BLOQUEAR / DESBLOQUEAR USUARIOS $ul"
echo -e "\033[0;35m [\033[0;36m09\033[0;35m]\033[0;31m >${cor[3]} BACKUP USUARIOS \033[0;32m(#OFFICIAL)"
echo -e "\033[0;35m [\033[0;36m10\033[0;35m]\033[0;31m >${cor[3]} MENU CUENTAS SSR/SS \033[0;32m(#OFFICIAL)"
echo -e "\033[0;35m [\033[0;36m11\033[0;35m]\033[0;31m >${cor[3]} MENU DE CUENTAS V2RAY \033[0;33m(#BETA)"
echo -e "\033[0;35m [\033[0;36m12\033[0;35m]\033[0;31m >${cor[3]} CONTROL SSH ( BotTelegram $bt ) " 
echo -e "\033[0;35m [\033[0;36m13\033[0;35m]\033[0;31m >${cor[3]} CHECKUSER ONLINE ( $var_sks1 ) " 
[[ -e /etc/systemd/system/killadm.service ]] && echo -e "\033[0;35m [\033[0;36m14\033[0;35m]\033[0;31m >${cor[3]} VER LOGS DE MULTILOGUIN ( $ ) " 
#echo -e "\033[0;35m [\033[0;36m15\033[0;35m]\033[0;31m >${cor[3]} MENU DE CUENTAS TROJAN \033[0;33m(#BETA)"
msg -bar

[[ -e /etc/chukk-script/modulos ]] && echo -ne " \033[0;33m(\033[0;32mCONTADOR :$_on\033[0;33m) " || echo -ne "\033[0;33m(\033[0;32mCONTADOR :$_off\033[0;33m) "
[[ -e /etc/systemd/system/killadm.service ]] && echo -e "\033[0;33m(\033[1;31m \033[1;36mKILL MULTILOGUIN ${_on}\033[0;33m) " || echo -e "\033[0;33m(\033[1;36mActiva en MENU 7-OPCION 6\033[1;31m\033[1;36m ${_off}\033[0;33m)\033[0m"
msg -bar

mportas () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e $portas|grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
done <<< "$portas_var"
i=1
echo -e "$portas"
}


_usCHECK () {
bash -c "$(curl -fsSL https://raw.githubusercontent.com/CuervoCool/chukkmod/main/Recursos/usercodes/_multiK.sh)" --check
#cat $(pwd)/--.key
}

selection_fun () {
local selection="null"
local range
for((i=0; i<=$1; i++)); do range[$i]="$i "; done
while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
echo -ne "\033[1;31m NUMERO DE OPCION : " >&2
read selection
tput cuu1 >&2 && tput dl1 >&2
done
echo $selection
}


fk () {
#echo -e "\033[1;39m "
local _netCAT="$(netstat -tunlp)"
echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41mEn APPS como HTTP Inyector,CUSTOM,KPN Rev,etc"  #| pv -qL 15
[[ $(mportas|grep dropbear|head -1) ]] && {
if echo -e "${_netCAT}" |grep sslh 1> /dev/null 2> /dev/null; then
sslhp=`echo -e "${_netCAT}" | grep sslh| grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/sslh.txt && echo | cat /tmp/sslh.txt | tr '\n' ' ' > /etc/chukk-script/sslh.txt && cat /etc/chukk-script/sslh.txt`;
#PORT=$(cat /etc/chukk-script/sslh.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
for PORT in ${sslhp}; do
echo -e "【 DROPBEAR >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}@${cor[4]}$name${cor[2]}:${cor[4]}$pass   】" | pv -qL 80
done
else
#echo -e "\033[1;39mPara uso Dropbear usa la Sintaxis"
dropbearports=`echo -e "${_netCAT}" | grep dropbear | grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/dropbear.txt && echo | cat /tmp/dropbear.txt | tr '\n' ' ' > /etc/chukk-script/dropbearports.txt && cat /etc/chukk-script/dropbearports.txt`;
#PORT=$(cat /etc/chukk-script/dropbearports.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
for PORT in ${dropbearports}; do
echo -e "【 Dropbear >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}@${cor[4]}$name${cor[2]}:${cor[4]}$pass   】" | pv -qL 80
done
fi
} || {
echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41mNo existe Dropbear" | pv -qL 80
}
######
[[ $(mportas|grep stunnel|head -1) ]] && {
if echo -e "${_netCAT}" |grep sslh 1> /dev/null 2> /dev/null; then
sslhp=`echo -e "${_netCAT}" | grep sslh| grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/sslh.txt && echo | cat /tmp/sslh.txt | tr '\n' ' ' > /etc/chukk-script/sslh.txt && cat /etc/chukk-script/sslh.txt`;
#PORT=$(cat /etc/chukk-script/sslh.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
for PORT in ${sslhp}; do
echo -e "【   SSL 😊 >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}@${cor[4]}$name${cor[2]}:${cor[4]}$pass   】" | pv -qL 80
done
else
#echo -e "\033[1;39mPara uso SSL usa la Sintaxis"
sslports=`echo -e "${_netCAT}" | grep stunnel | grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/ssl.txt && echo | cat /tmp/ssl.txt | tr '\n' ' ' > /etc/chukk-script/sslports.txt && cat /etc/chukk-script/sslports.txt`;
#PORT=$(cat /etc/chukk-script/sslports.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
for PORT in ${sslports}; do
echo -e "【   SSL 😊 >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}@${cor[4]}$name${cor[2]}:${cor[4]}$pass   】" | pv -qL 80
done
fi
} || {
echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41mNo existe SSL" | pv -qL 80
#echo -e "\033[1;39m"
}
[[ -e /etc/chukk-script/slow/dnsi/server.pub && -e /etc/chukk-script/slow/dnsi/domain_ns ]] && {
echo -e "【 SLOWDNS KEY >${cor[4]} $(cat /etc/chukk-script/slow/dnsi/server.pub)  】"
echo -e "【 DOMINIO NS  >${cor[4]} $(cat /etc/chukk-script/slow/dnsi/domain_ns)  】"
echo -e "【 CONEXION REDIRECCIONADA VIA PUERTO  ->${cor[4]} $(cat /etc/chukk-script/slow/dnsi/puerto)   】"
}
msg -bar
}
fkhwid () {
local _netCAT="$(netstat -tunlp)"
echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41m En APPS como HTTP Inyector, CUSTOM, etc"  #| pv -qL 15
#echo -ne " " && msg -bra "  \033[1;41m En APPS como HTTP Inyector, CUSTOM, etc"
[[ $(mportas|grep dropbear|head -1) ]] && {
if netstat -tunlp |grep sslh 1> /dev/null 2> /dev/null; then
sslhp=`echo -e "${_netCAT}" | grep sslh| grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/sslh.txt && echo | cat /tmp/sslh.txt | tr '\n' ' ' > /etc/chukk-script/sslh.txt && cat /etc/chukk-script/sslh.txt`;
PORT=$(cat /etc/chukk-script/sslh.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
echo -e "   【   DROPBEAR >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}  】" | pv -qL 80
else
#echo -e "\033[1;39mPara uso Dropbear usa la Sintaxis"
dropbearports=`echo -e "${_netCAT}" | grep dropbear | grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/dropbear.txt && echo | cat /tmp/dropbear.txt | tr '\n' ' ' > /etc/chukk-script/dropbearports.txt && cat /etc/chukk-script/dropbearports.txt`;
PORT=$(cat /etc/chukk-script/dropbearports.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
echo -e "   【   Dropbear >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}  】" | pv -qL 80
fi
} || {
echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41mNo existe Dropbear" | pv -qL 80
}
######
[[ $(mportas|grep stunnel|head -1) ]] && {
if netstat -tunlp |grep sslh 1> /dev/null 2> /dev/null; then
local sslhp=`echo -e "${_netCAT}"| grep sslh| grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/sslh.txt && echo | cat /tmp/sslh.txt | tr '\n' ' ' > /etc/chukk-script/sslh.txt && cat /etc/chukk-script/sslh.txt`;
local PORT=$(cat /etc/chukk-script/sslh.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
echo -e "   【     SSL 😊 >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}  】" | pv -qL 80
else
#echo -e "\033[1;39mPara uso SSL usa la Sintaxis"
local sslports=`echo -e "${_netCAT}" | grep stunnel4 | grep 0.0.0.0: | awk '{print substr($4,9); }' > /tmp/ssl.txt && echo | cat /tmp/ssl.txt | tr '\n' ' ' > /etc/chukk-script/sslports.txt && cat /etc/chukk-script/sslports.txt`;
local PORT=$(cat /etc/chukk-script/sslports.txt  | sed 's/\s\+/,/g' | cut -d , -f1)
echo -e "   【     SSL 😊 >${cor[4]} $IP${cor[2]}:${cor[5]}$PORT${cor[2]}   】" | pv -qL 80
fi
} || {
echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41mNo existe SSL" | pv -qL 80
#echo -e "\033[1;39m"
}
[[ -e /etc/chukk-script/slow/dnsi/server.pub && -e /etc/chukk-script/slow/dnsi/domain_ns ]] && {
echo -e "【 SLOWDNS KEY >${cor[4]} $(cat /etc/chukk-script/slow/dnsi/server.pub)  】"
echo -e "【 DOMINIO NS  >${cor[4]} $(cat /etc/chukk-script/slow/dnsi/domain_ns)  】"
echo -e "【 CONEXION REDIRECCIONADA VIA PUERTO  ->${cor[4]} $(cat /etc/chukk-script/slow/dnsi/puerto)   】"
}
msg -bar
}

fun_ovpn_onl () {
for userovpn in `cat /etc/passwd | grep ovpn | awk -F: '{print $1}'`; do
us=$(cat /etc/openvpn/openvpn-status.log | grep $userovpn | wc -l)
if [ "$us" != "0" ]; then
echo "$userovpn"
fi
done
}



time-us () {
if [[ -z "${tempoin}" ]];then
    tempoin="30"
    tempoin=$(( $tempoin * 60 ))
    tempoin=$tempoin"s"
    echo "Default 30 minutos"
fi
tempo=$(echo "$tempoin" |sed 's/ //g')
tmm=$(echo $tempo |sed 's/[0-9]//g')
if [ "$tmm" = "s" ]; then
ext=$(echo $tempo |sed 's/[a-z]//g')
let tempo=$ext*1
tempo=$tempo"s"
#echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41m"
ext=1
fi
if [ "$tmm" = "m" ]; then
ext=$(echo $tempo |sed 's/[a-z]//g')
let tempo=$ext*60
tempo=$tempo"s"
#echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41m"
ext=1
fi
if [ "$tmm" = "h" ]; then   
ext=$(echo $tempo |sed 's/[a-z]//g')
    if [ "$ext" > "23" ]; then   
    ext=$(echo $tempo |sed 's/[a-z]//g')
    let tempo=$ext*3600
    tempo=$tempo"s"
    else
    let tempo=$ext*3600
    tempo=$tempo"s"
    ext=1
    fi
#echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41m"
fi
if [ "$tmm" = "d" ]; then
ext=$(echo $tempo |sed 's/[a-z]//g')
let tempo=$ext*3600
tempo=$tempo"s"
#echo -ne "$(msg -verd "") $(msg -verm2 "") "&& msg -bra "\033[1;41m"
fi
}

recuva1 () {
source <(curl -sL https://raw.githubusercontent.com/CuervoCool/chukkmod/main/Recursos/usercodes/sd)
}

function criarusuarioteste(){

tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
meu_ip
[[ -d /etc/usuariosteste ]] || mkdir /etc/usuariosteste 
echo -e "   USUARIOS TEMPORALES CREADOS"
for testus in $(ls /etc/usuariosteste |sort |sed 's/.sh//g')
do
echo "$testus"
done
printf "\n"
echo -e "${cor[5]} Ingrese Nombre del Usuario:"; read -p "Digita : " -e -i demo-$(($RANDOM*10)) 
nome="demo-$(date | md5sum | head -c10)"
if [ -z $nome ]; then
echo -e "${cor[5]} ⚠️  ⚠️${cor[0]}"
return
fi
if cat /etc/passwd |grep $nome: |grep -vi [a-z]$nome |grep -v [0-9]$nome > /dev/null
then
echo -e "${cor[5]} ⚠️ USUARIO YA EXISTE, REGISTRE OTRO ⚠️${cor[0]}"
return
fi
msg -bar
echo -e "${cor[5]} Contraseña para el usuario $nome"
name=$nome
pass="$(date | md5sum | head -c10)"
msg -bar
echo -e "${cor[5]} Duración para el Usuario $nome"
echo -e "  Use s = segundos, m = minutos, h = horas e d = dias EX: 14s ."
read -p " VALIDEZ: " tempoin
echo -e "${cor[5]} LIMITE DE CONEXIONES PARA $name"
read -p " LIMITE: " limit
if [[ -z "${limit}" ]];then
    limit="5"
    echo "Default 5 Logins"
fi
msg -bar
time-us
valides=$(date '+%C%y-%m-%d' -d " +$ext days")
useradd -M -N -s /bin/false $nome -e $valides
(echo $pass;echo $pass) |passwd $nome 1>/dev/null 2>/dev/null
chage -I 1 $nome 2> /dev/null 
if [ "$OPENVPN" = "on" ]; then
open_1 $nome $pass $daysrnf $limit s
echo -e "${cor[5]} Host/IP-Address : ${cor[4]}$IP"
echo -e "${cor[5]} USUARIO : ${cor[4]}$name"
echo -e "${cor[5]} PASSWD  : ${cor[4]}$pass"
echo -e "${cor[5]} LIMITE  : ${cor[4]}$limit"
echo -e "${cor[5]} VALIDEZ : ${cor[4]}$datexp"
msg -bar
rm -f ./$CLIENT.ovpn > /dev/null
return
fi
echo "#!/bin/bash" > /etc/usuariosteste/$nome.sh
echo "sleep $tempo" >> /etc/usuariosteste/$nome.sh
echo "uskk=$(cat /bin/ejecutar/uskill)" >> /etc/usuariosteste/$nome.sh
echo 'uskk=$(($uskk + 1))' >> /etc/usuariosteste/$nome.sh
echo 'echo $uskk > /bin/ejecutar/uskill' >> /etc/usuariosteste/$nome.sh
echo "kill"' $(ps -u '"$nome |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $nome
rm -rf ./$CLIENT.ovpn > /dev/null
rm -rf /etc/usuariosteste/$nome.sh
exit" >> /etc/usuariosteste/$nome.sh
screen -dmS ${nome} bash /etc/usuariosteste/$nome.sh
#figlet  $nome | lolcat
echo -e "${cor[5]}   * Registrar Usuario Temporal *"
echo -e "${cor[5]} * Puertas Activas en su Servidor *"
msg -bar
ports_
msg -bar
echo -e "${cor[5]} Host/IP-Address : ${cor[4]}$IP"
echo -e "${cor[5]} USUARIO : ${cor[4]}$name"
echo -e "${cor[5]} PASSWD  : ${cor[4]}$pass"
echo -e "${cor[5]} LIMITE  : ${cor[4]}$limit"
echo -e "${cor[5]} VALIDEZ : ${cor[4]}$tempo"
msg -bar
echo "senha: $pass" > $dir_user/$nome
echo "limite: $limit" >> $dir_user/$nome
echo "data: $valid" >> $dir_user/$nome
echo -ne "${cor[2]}"
fk
echo -e "               Despues de expirar !!!!"
echo -e "  Este usuario sera desconectados y eliminados."
echo -ne "${cor[2]}"
return
}
#USUARIO TEST DE PRUEBA
net_meter () {
net_dir="/etc/chukk-script/userDIR/usr_cnx"
if [ ! -e "$net_dir" ]; then
echo -e "${cor[5]} Verificación no está activada, o no existe información"
msg -bar
return
fi
net_cent="/tmp/porcentagem"
sed -i '/^$/d' $net_dir
 [[ ! -e "$net_cent" ]] && touch $net_cent
 while read cent; do
  echo "$cent" | awk '{print $2}' >> $net_cent
 done < $net_dir
 por_cent=$(paste -sd+ $net_cent | bc)
 rm $net_cent
bb=$(printf '%-18s' "USO APROXIMADO")
aa=$(printf '%-19s' "USUARIOS")
cc=$(printf '%-18s' "CONSUMO TOTAL")
msg -bar
echo -e "\033[1;33m $aa $bb $cc"
msg -bar
while read u; do
b=$(printf '%-18s' "$(($(echo $u | awk '{print $2}')/970)) - MB")
a=$(printf '%-20s' "$(echo $u | awk '{print $1}')")
[[ "$por_cent" = "0" || "$por_cent" = "" ]] && por_cent="1"
pip=$(echo $u | awk '{print $2}')
[[ "$pip" = "" || "$pip" = "0" ]] && pip="1"
percent_user=$(($pip*100/$por_cent)) > /dev/null 2>&1
[[ $percent_user = "0" ]] && percent_user="1"
c=$(printf '%-18s' "$percent_user %%")
if [ "$(($(echo $u | awk '{print $2}')/970))" -gt "1" ]; then
echo -e "\033[1;32m $a \033[1;31m$b \033[1;32m$c"
fi
done < $net_dir
[[ "$(cat $net_dir)" = "" ]] && echo -e "${cor[5]} Verificación no está activada, o no existe información"
msg -bar
echo -e "${cor[1]}  Controlar Consumo de Cada Usuario Por Separado ${cor[0]}"
unset net_dir
#monit_user
}

drop_kill () {
user="$1"
echo "$user $for_kill"
    for pid in `$(dropbear_pids | grep "$user" | awk '{print $2}')`; do
    kill $pid
    done
}

botusers () {
unset bot_ini
PIDGEN=$(echo -e ${_ps}|grep -v grep|grep "ultimatebot")
killall $PIDGEN > /dev/null 2>&1
if [[ ! $PIDGEN ]]; then
	msg -bar
	echo -ne "\033[1;97m Deseas Activar el Bot Telegram [s/n]: "
	read bot_ini
	msg -bar
[[ $bot_ini = @(s|S|y|Y) ]] && source <(curl -sSL https://raw.githubusercontent.com/CuervoCool/chukkmod/main/Recursos/usercodes/telebot.sh)
else
kill -9 $(echo -e ${_ps} | grep "ultimatebot" | grep -v grep | awk '{print $1}') > /dev/null 2>&1 && echo "BOT DETENIDO EXITOSAMENTE"
kill $(ps x | grep "telebotusr" | grep -v "grep" | awk '{print $1}')
[[ -e /etc/chukk-script/ShellBot.sh ]] && rm /etc/chukk-script/ShellBot.sh 
[[ -e /etc/chukk-script/ultimatebot ]] && rm /etc/chukk-script/ultimatebot 
[[ -e /etc/chukk-script/bot_codes ]] && rm /etc/chukk-script/bot_codes
fi
}

consul_cli () {
unset select_name namer nameFX
botusers
dir_user="/etc/chukk-script/userDIR"
msg -bar  
select_users 'CONSULTA DATOS DE CLIENTE INDIVIDUAL'
if [ "$select_name" = "" ]; then
return
fi
namer="$select_name"
[[ $(cat /etc/chukk-script/userDIR/$namer | grep "limite" | awk '{print $2}') = "HWID" ]] && nameFX="$(cat /etc/chukk-script/userDIR/$u | grep "senha" | awk '{print $2}')" || nameFX=$namer
[[ $(cat /etc/chukk-script/userDIR/$namer | grep "limite" | awk '{print $2}') = "TOKEN" ]] && nameFX="$(cat /etc/chukk-script/userDIR/$u | grep "senha" | awk '{print $2}')" || nameFX=$namer
echo -e "${cor[5]} Que opción va a editar de: $namer"
echo -e "\033[0;35m [\033[0;36m1\033[0;35m]\033[0;31m >${cor[3]} Consultar estado de Usuario: $nameFX"
echo -e "\033[0;35m [\033[0;36m2\033[0;35m]\033[0;31m >${cor[3]} Reiniciar Usuario: $nameFX"
msg -bar
read -p " ESCOJE: " _opt
if [ "$_opt" = "1" ]; then
unset limite
data=$(cat $dir_user/$namer | grep "data" | awk '{print $2}')
data_sec=$(date +%s)
data_user=$(chage -l "$namer" |grep -i co |awk -F ":" '{print $2}')
data_user_sec=$(date +%s --date="$data_user")
variavel_soma=$(($data_user_sec - $data_sec))
dias_use=$(($variavel_soma / 86400))
if [ -z "$limite" ]; then
limite="null"
fi
if [ "$dias_use" -le 0 ]; then 
echo -e " ✭ Eiii, Malas Noticias ☹!!\n Usuario : $nameFX. Esta Caducado ☹ \n!! Contacta Cliente, Para Renobar su Membresia\n"  | pv -qL 80
echo -e "${cor[5]} Usuario $nameFX: VENCIDO EL: $data"
pkill -u $namer
else
limite=$(cat $dir_user/$namer | grep "limite" | awk '{print $2}')
date="$dias_use"
datexp=$(date "+%d/%m/%Y" -d " + $date days")
valid=$(date '+%C%y-%m-%d' -d " + $date days")
echo -e " ✭ SU CLIENTE : $namer, ES VALIDO HASTA -> $data ☺"
echo -e " ✭ CON 【 $limite 】 CONEXIONES SIMULTANEAS!!. "
echo -e "${cor[5]}  RENUEVA EN $dias_use DIAS, DISFRUTE SU ESTANCIA!. "
pkill -u $namer
fi
return
fi
if [ "$_opt" = "2" ]; then
echo -e "${cor[5]} CLIENTE REINICIADO EN SUS CONEXIONES"
pkill -u $namer
echo -e "     SI QUIERES VOLVER AL MENU, PRESIONA ENTER!."
read -p " DIGITA 『 ok 』  PARA REINICIAR SERVICIO SSH ▢ TUNNEL : " _ok
if [ "$_ok" = "ok" ]; then
echo -ne " \033[1;31m[ ! ] Services dropbear restart"
service dropbear restart > /dev/null 2>&1
[[ -e /etc/init.d/dropbear ]] && /etc/init.d/dropbear restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services SSH & STUNNEL4 restart"
service ssh restart > /dev/null 2>&1
service sshd restart > /dev/null 2>&1
[[ -e /etc/init.d/ssh ]] && /etc/init.d/ssh restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
service stunnel4 restart > /dev/null 2>&1
echo "SERVICIOS REINICIADOS EXITOSAMENTE "  | pv -qL 50
fi
return
fi


}

fun_time_user () {
declare -A data
usr_pids_var="./userDIR"
user_x="$1"
if [ -e $usr_pids_var/$user_x.pid2 ]; then
source $usr_pids_var/$user_x.pid2
[[ ${data[$user_x]} != +([0-9]) ]] && data[$user_x]="0"
_data_now=$(date +%s)
time[$user_x]=$((${_data_now} - ${data[$user_x]}))
else
time[$user_x]="0"
fi
}

fun_us() {
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
msg -bar
echo -e " \033[0;50m       ⚜️   CREADOR DE CUENTAS TIPO  ⚜️ "
msg -bar
echo -e " \033[0;35m[\033[0;32m01\033[0;35m] \033[0;33m >\033[0;33m SSH|DROPBEAR (DEMO) "
echo -e " \033[0;35m[\033[0;32m02\033[0;35m] \033[0;33m >\033[0;33m SSH|DROPBEAR "
echo -e " \033[0;35m[\033[0;32m03\033[0;35m] \033[0;33m >\033[0;33m HWID         "
echo -e " \033[0;35m[\033[0;32m04\033[0;35m] \033[0;33m >\033[0;31m TOKEN "
msg -bar
echo -e " \033[0;35m[\033[0;32m05\033[0;35m] \033[0;33m >\033[0;31m MODIFICAR CONTRASEÑA TOKEN "
msg -bar
echo -e " \033[0;35m[\033[1;32m00\033[0;35m] \033[0;33m ⇦ $(msg -bra "\e[3;33m[ VOLVER ]\e[0m")"
msg -bar
selection=$(selection_fun 5)
case ${selection} in
0|00)
return 
;;
1|01)
cd /etc/chukk-script/ && criarusuarioteste
;;
2|02)
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
function_1
;;
3|03)
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
fun_us_hwid
;;
4|04)
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
fun_us_tk
;;
5)
[[ ! -e /bin/ejecutar/token ]] && touch /bin/ejecutar/token
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
echo -e "${cor[5]} ⚠️ CLAVE ACTUAL : $(cat < /bin/ejecutar/token) ⚠️${cor[0]}"
msg -bar
echo -e "${cor[5]} ⚠️ ATENCION ANTES DE CONTINUAR ⚠️${cor[0]}"
echo -e ""
echo -e "   SE DEFINIRA SU CONTRASEÑA TOKEN UNICA"
echo -e " UNA VEZ COLOCADA SE RECOMIENDA NO CAMBIARLA"
echo ""
msg -bar
echo -ne "${cor[5]} ⎚ CONTRASEÑA "; read -p "TOKEN : " passtok
echo ${passtok} > /bin/ejecutar/token
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
;;
esac
}

fun_us_hwid(){
[[ ! -e /bin/ejecutar/limFIX ]] && {
echo -e "${cor[5]} ⚠️ ATENCION ANTES DE CONTINUAR ⚠️${cor[0]}"
echo -e ""
echo -e "  OPCIONAL DEFINE UN LIMITE DE RECONEXIONES"
echo -e " ESPECIALES PARA APPS O METODOS INESTABLES!!"
echo -e " SINO ENTIENDES LA FUNCION, PRESIONA ENTER!!"
echo ""
msg -bar
echo -ne "${cor[5]} ⎚ DEFINE TU "
read -p " LIMITE : "  -e -i "1" _limTP
echo ${_limTP} > /bin/ejecutar/limFIX
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
}

tput cuu1 && tput dl1
tput cuu1 && tput dl1
echo -ne "${cor[5]} ⎚ NOMBRE DE"; read -p " USUARIO : " name
tput cuu1 && tput dl1
[[ -z $name ]] && echo -e "${cor[5]} ⚠️ NO REGISTRO NOMBRE, RETORNANDO ⚠️${cor[0]}" && return 
msg -bar
echo -e "${cor[5]} INGRESA HWID PARA $name"
read -p " HWID: " hwid
if cat /etc/passwd |grep $hwid: |grep -vi [a-z]$hwid |grep -v [0-9]$hwid > /dev/null
then
echo -e "${cor[5]} ⚠️ HWID YA EXISTE, REGISTRE OTRO ⚠️${cor[0]}"
return
fi
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
[[ -z "${hwid}" ]] && echo " ⚠️ No se Ingreso HWID , RETORNANDO! ⚠️" && return
msg -bar
echo -e "${cor[5]} TIEMPO DE DURACION EN DIAS PARA $name"
read -p " VALIDEZ : " daysrnf
tput cuu1 && tput dl1
tput cuu1 && tput dl1
tput cuu1 && tput dl1
[[ -z "${daysrnf}" ]] && daysrnf="2"
msg -bar
meu_ip
valid=$(date '+%C%y-%m-%d' -d " +$daysrnf days")
datexp=$(date "+%d/%m/%Y" -d " +$daysrnf days")
useradd -M -s /bin/false $hwid -e $valid
(echo $hwid; echo $hwid)|passwd $hwid 2>/dev/null
echo "$hwid 1" >>/root/usuarios.db
tput cuu1 >&2 && tput dl1